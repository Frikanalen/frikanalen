#!/bin/bash
set -e

refname="$1"
oldrev="$2"
newrev="$3"

if [ -z "$GIT_DIR" ]; then echo GIT_DIR missing; exit 1; fi
if [ -z "$refname" ]; then echo params missing; exit 1; fi

echo "> Deploying app"
dir={{app_dir}}/app
fkweb_dir=$dir/packages/fkweb

# make sure old migrations are truly gone
find $fkweb_dir -path "**/migrations/*.py" -not -name "__init__.py" -delete
find $fkweb_dir -path "**/migrations/*.pyc" -not -name "__init__.py" -delete

git --work-tree="$dir" checkout -qf "$newrev"
cd $dir

rollback_msg() {
    arg=$?
    echo "> EXITED WITH ERROR"
    echo "> PLEASE ROLL BACK THE DEPLOY:"
    echo ">   git push -f <env> $oldrev:$refname"
    exit $arg
}
trap rollback_msg ERR

# activate virtualenv
. "{{app_dir}}/env/bin/activate"

# pass env vars to manage.py, a bit hacky, maybe use .env file?
export DJANGO_SETTINGS_MODULE=fkbeta.settings.production
export SECRET_KEY={{app_secret_key}}
export DATABASE_USER={{app_user}}
export DATABASE_PASS={{app_db_pass}}
export DATABASE_NAME={{app_db_name}}

# TEMPORARY CODE TO MIGRATE TO CUSTOM USER
echo "CREATE TABLE django_migrations_201911 AS (SELECT * FROM django_migrations);" | $fkweb_dir/manage.py dbshell
echo "DELETE FROM django_migrations;" | $fkweb_dir/manage.py dbshell
echo "UPDATE django_content_type SET app_label='fk' WHERE app_label='auth' AND model='user';" | $fkweb_dir/manage.py dbshell
$fkweb_dir/manage.py migrate --fake
sudo systemctl restart fkweb

echo "DONE THE MIGRATION"
exit 0

# should only do these when required
pip install -qr "$fkweb_dir/requirements.txt"
$fkweb_dir/manage.py collectstatic --noinput | tail -3 # only last few lines useful
$fkweb_dir/manage.py migrate --noinput

sudo systemctl restart fkweb

exit 0
