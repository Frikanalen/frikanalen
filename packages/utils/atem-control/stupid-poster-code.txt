/*
// FIXME: This should not be running through the atem control server at all!
// TODO: move from buffer() to streams
import {Request as expressRequest, Response as expressResponse} from "express";
import fetch from "node-fetch";

app.get(
    "/poster/preview",
    async (req: expressRequest, res: expressResponse) => {
        const text = req.query.text;
        const heading = req.query.heading;
        console.error(
            "Generating poster: [",
            text,
            "] heading: [",
            heading,
            "]."
        );
        const pngPosterRes = await fetch(
            "http://stills-generator/getPoster.png",
            {
                headers: { "Content-Type": "application/json" },
                method: "post",
                body: JSON.stringify({ text: text, heading: heading }),
            }
        );
        if (!pngPosterRes.ok) {
            res
                .status(500)
                .send(
                    `unexpected response from renderer ${pngPosterRes.statusText}`
                )
                .end();
            return;
        }
        const pixMap = await pngPosterRes.arrayBuffer();
        res.type("image/png").send(new Buffer(pixMap));
    }
);

app.post(
    "/poster/upload",
    async (req: expressRequest, res: expressResponse) => {
        const staff = await check_if_staff(req.headers.authorization);
        if (!staff) {
            res.status(403).send("User not authorized").end();
            return;
        }

        const posterRequest = await fetch(
            "http://stills-generator/getPoster.rgba",
            {
                method: "post",
                body: JSON.stringify(req.body),
                headers: { "Content-Type": "application/json" },
            }
        );
        if (!posterRequest.ok)
            throw new Error(
                `unexpected response from renderer ${posterRequest.statusText}`
            );
        try {
            const pixMap = await posterRequest.arrayBuffer();
            await this.atemConnection.uploadStill(
                0,
                new Buffer(pixMap),
                "test",
                "test"
            );
            res.send({ result: "success" });
        } catch (e) {
            console.log(e);
            throw new Error(`exception: ${e}`);
        }
    }
);

await this.atemConnection.connect(this.atemHost);
}
*/