#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015-2016 Petter Reinholdtsen <pere@hungry.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2.0 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301  USA
#
# Look for unregistered files in /tank/new_media/media/, and ask if
# they should be registered in the database.

import argparse
import os
import sys
import json
import glob
import getpass
import mechanize
import urllib2
import ConfigParser
import re
import pipes
from subprocess import *
import codecs

mediadir = '/tank/new_media/media'

loginurl = 'http://beta.frikanalen.no/api/api-auth/login/?next=/api/'
apiurl        = 'http://beta.frikanalen.no/api/'
videofilesurl = 'http://beta.frikanalen.no/api/videofiles/'
tokenurl      = 'http://beta.frikanalen.no/api/obtain-token'
videosurl     = 'http://beta.frikanalen.no/api/videos/'

args = {}

def json_post(mech, url, jsondata):
    """
Post JSON data to the API.

Tried to use mechanize, but did not find a way to set content-type
with POST request.  Using urllib2 until I find a way to do it.

"""
    json_data = json.dumps(jsondata)
    headers = {
        'Content-type': 'application/json; charset=UTF-8',
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'X-Requested-With' : 'XMLHttpRequest'
        }
#        print headers
    for tup in mech.extraheaders:
        headers[tup[0]] = tup[1]
    req = urllib2.Request(url, data = json_data, headers = headers)
    f = urllib2.urlopen(req)
        # FIXME check return value
    return f

def frikanalen_login(username, password):
    """
Log into Frikanalen and provide a mechanize object to use this
session.  The API and the django pages uses different login mechanisms,
make sure to log into both.
"""
    try:
        mech = mechanize.Browser()
#        mech.set_debug_http(True)

        # Django login
        res = mech.open(loginurl)
        mech.select_form(nr=0);
        mech['username'] = username
        mech['password'] = password
        response = mech.submit()

        mech.open(tokenurl)
        jsonstr = mech.response().read()
        j = json.loads(jsonstr.decode('utf8'))
        token = j[u'key']
        mech.extraheaders = [('Authorization', 'Token %s' % token)]
        mech.addheaders = mech.extraheaders

        # Don't handle cookies when talking to the API, use token instead
        mech.set_cookiejar(None)

        return mech
    except urllib2.HTTPError, e:
        print "HTTP error for %s: %s" % (loginurl, str(e))
        raise
    except urllib2.URLError, e:
        print "URL error for %s: %s" % (loginurl, str(e))
        raise

def frikanalen_video_info(mech, id):
    mech.open('%s%d' % (videosurl, id))
    jsonstr = mech.response().read()
    j = json.loads(jsonstr.decode('utf8'))
    return j

def videofile_for_video(id):
    headers = {}
    url = '%s?video_id=%s' % (videofilesurl, id)
    try:
        req = urllib2.Request(url, None, headers)
        resp = urllib2.urlopen(req).read()
        j = json.loads(resp.decode('utf8'))
#        print j
        return j['results']
    except urllib2.HTTPError, e:
        print "HTTP error for %s: %s" % (url, str(e))
        return None
    except urllib2.URLError, e:
        print "URL error for %s: %s" % (url, str(e))
        return None

def guess_file_format(filepath):
    """
Guess file format, and if it is a video file or not.
Return tuple with format number and video status.
"""
    if -1 != filepath.find("large_thumb/"):
        return (1, False)
    if -1 != filepath.find("broadcast/"):
        return (2, True)
    if -1 != filepath.find("vc1/"):
        return (3, True)
    if -1 != filepath.find("med_thumb/"):
        return (4, False)
    if -1 != filepath.find("small_thumb/"):
        return (5, False)
    if -1 != filepath.find("original/"):
        return (6, True)
    if -1 != filepath.find("theora/"):
        return (7, True)
    if -1 != filepath.find("srt/"):
        return (8, False)
    return (-1, False)

class DeleteRequest(mechanize.Request):
    "Extend the mechanize Request class to allow a http DELETE"
    def get_method(self):
        return "DELETE"

def videofile_delete(mech, videofile_id):
    print "DELETE videofile id %d" % videofile_id
    try:
        url = "%s%d" % ( videofilesurl, videofile_id)
        mech.addheaders = mech.extraheaders
        mech.open(DeleteRequest(url))
    except Exception, e:
        print "DELETE failed: %s" % str(e)
        raise

def videofile_add(mech, video_id, filepath, fileformat):
    print "POST video id %d filename %s format %d" % (video_id, filepath, fileformat)
    params = {
        'video' : video_id,
        'format' : fileformat,
        'filename' : filepath,
        'old_filename' : filepath,
        }
    json_post(mech, videofilesurl, params)

def videofile_find_unregistered(mech, videodir):
    id = int(videodir.split('/')[-1])
    metainfo = frikanalen_video_info(mech, id)
    if metainfo['duration'] is not None:
        videolength = duration2sec(metainfo['duration'])
    else:
        print "video %d: no duration in video info" % id
        videolength = 0
#    print id
    regfilehash = {}
    mediafilehash = {}
    formathash = {}
    filehash = {}
    wronglengthfile = {}
    regfiles = videofile_for_video(id)
    errors = []

    # First check files on disk, then check registration entries, to
    # make sure registration entry ID is stored in filehash[filename].
    for root, dirs, files in os.walk(videodir):
#       print root, dirs, files
       for file in files:
           fullpath = os.path.join(root, file).decode('utf-8')
           mediapath = fullpath.replace("%s/" % mediadir, '')
#           print mediapath
           filehash[mediapath] = 1
           format, isvideo = guess_file_format(mediapath)
           formathash[format] = mediapath
           mediafilehash[mediapath] = format
           if isvideo:
               duration = get_file_duration(fullpath)
               if duration is None:
                   msg = "video %d: no duration %d format %s" % (id, format, mediapath)
                   errors.append(msg)
                   if format in [7]:
                       wronglengthfile[mediapath] = format
               else:
                   filelength = duration2sec(duration)
                   if 1 < abs(videolength-filelength):
                       msg = "video %d: length mismatch (%f) for %d format %s (%f)"\
                           % (id, videolength, format, mediapath, filelength)
                       errors.append(msg)
                   # only over to remove generated Ogg Theora files
                       if format in [7]:
                           wronglengthfile[mediapath] = format
    if 0 == len(regfiles):
        errors.append("video %d: no files registered" % id)
    for regfile in regfiles:
        regfilehash[regfile['filename']] = regfile['format']
        filehash[regfile['filename']] = regfile['id']

    if 6 in formathash and not 2 in formathash:
        msg = "video %d: original but no broadcast format - will crash playout"%id
        errors.append(msg)
    unregistered = {}
    missingfile = {}
    for file in filehash:
        if file in mediafilehash and file in regfilehash:
            True # all OK
        elif file in mediafilehash:
            errors.append("video %d: found unregistered file %s format %d" % (id, file, mediafilehash[file]))
            unregistered[file] = mediafilehash[file]
        else:
            errors.append("video %d: found missing registered file id %s %s format %d" % (id, filehash[file], file, regfilehash[file]))
            missingfile[file] = regfilehash[file]

    if 0 < len(errors):
        print
        print "Issues with video id %d (%s)" % (id, metainfo['name'])
        print "\n".join(sorted(errors))
        print
        if 0 < len(regfilehash.keys()):
            print "Already registered files:"
            for file in sorted(regfilehash.keys()):
                if file in mediafilehash:
                    print "  format %d %s" % (regfilehash[file], file)
                else:
                    print " *format %d %s" % (regfilehash[file], file)
            print
            print "Missing files are marked with (*)."
        if 0 < len(missingfile):
            i = ''
            if not args.auto:
                i = raw_input("Remove registration for missing files to API database? y/[n]/q: ")
            if i == '' or i == "no" or i == "n":
                print "not removing registation for missing files"
            elif i == "yes" or i == "y":
                for file in missingfile.keys():
                    videofile_id = filehash[file]
                    videofile_delete(mech, videofile_id)
            elif i == 'q':
                return False
        if 0 < len(unregistered):
            i = ''
            if args.autoappend or args.auto:
                i = 'yes'
            else:
                i = raw_input("Add files missing to API database? y/[n]/q: ")
            if i == '' or i == "no" or i == "n":
                print "not adding unregistered files"
            elif i == "yes" or i == "y":
                for file in unregistered.keys():
                    videofile_add(mech, id, file, unregistered[file])
            elif i == 'q':
                return False
        if 0 < len(wronglengthfile):
            i = ''
            if not args.auto:
                i = raw_input("Remove generated files with wrong length? y/[n]/q: ")
            if i == '' or i == "no" or i == "n":
                print "not removing generated files with wrong length"
            elif i == "yes" or i == "y":
                for file in wronglengthfile.keys():
                    fullpath = os.path.join(mediadir, file).decode('utf-8')
                    print "Removing %s" % fullpath
                    os.unlink(fullpath)
                    if file in filehash:
                        videofile_delete(mech, filehash[file])
            elif i == 'q':
                return False

    return True

def get_file_duration(filepath):
    """
Run ffprobe to get the video file duration, return duration using the
"hh:mm:ss.ss" notation.

"""
    cmd = u'ffprobe {} 2>&1'.format(pipes.quote(filepath))
    sb = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
    output = sb.stdout.read()
    sb.kill()
    for line in output.split('\n'):
#        print line
        m = re.match( r".* Duration: (\S+),.*", line)
#        print m
        if m:
            return m.group(1)
    return None

def duration2sec(duration):
    parts = duration.split(':')
    s = 0
    for part in parts:
        s *= 60
        s += float(part)
    return s

def load_config():
    config = ConfigParser.ConfigParser()
    configfilename = '~/.frikanalen.ini'
    config.read(os.path.expanduser(configfilename))

    if not config.has_section('auth'):
        print """
error: no %s or missing auth section in file.

The content of %s should look something like this:

[auth]
username=myusername
password=mypassword

""" % (configfilename, configfilename)
        exit(1)
    return config

def main():
    global args
    # Always output in UTF-8
    sys.stdout = codecs.getwriter('utf8')(sys.stdout)

    parser = argparse.ArgumentParser(description='Update video file list in Frikanalen.')
    parser.add_argument('videoid', metavar='videoid', type=int, nargs='*',
                    help='The video ID(s) to investigate.')
    parser.add_argument('--auto', action='store_true',
                        help='No questions, add new files but no more')
    parser.add_argument('--autoappend', dest='autoappend', action='store_const',
                        const=True, default=False,
                        help='Automatically add new files found on disk.')

    args = parser.parse_args()

    config = load_config()
    username = config.get('auth', 'username')
    try:
        password = config.get('auth', 'password')
    except ConfigParser.NoOptionError:
        password = getpass.getpass("Password for %s: " % username)

    mech = frikanalen_login(username, password)

    if len(args.videoid) > 0:
        for id in args.videoid:
            if not videofile_find_unregistered(mech, "%s/%s" % (mediadir, id)):
                print "Exiting"
                break
    else:
        for videodir in sorted(glob.glob('%s/[0-9]*' % mediadir), reverse=True):
            if not videofile_find_unregistered(mech, videodir):
                print "Exiting"
                break

if __name__=="__main__":
    main()
